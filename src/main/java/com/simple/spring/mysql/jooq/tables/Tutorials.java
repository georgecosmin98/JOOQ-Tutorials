/*
 * This file is generated by jOOQ.
 */
package com.simple.spring.mysql.jooq.tables;


import com.simple.spring.mysql.jooq.Keys;
import com.simple.spring.mysql.jooq.TestDb;
import com.simple.spring.mysql.jooq.tables.records.TutorialsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tutorials extends TableImpl<TutorialsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>test_db.tutorials</code>
     */
    public static final Tutorials TUTORIALS = new Tutorials();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TutorialsRecord> getRecordType() {
        return TutorialsRecord.class;
    }

    /**
     * The column <code>test_db.tutorials.id</code>.
     */
    public final TableField<TutorialsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>test_db.tutorials.title</code>.
     */
    public final TableField<TutorialsRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>test_db.tutorials.description</code>.
     */
    public final TableField<TutorialsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>test_db.tutorials.published</code>.
     */
    public final TableField<TutorialsRecord, Byte> PUBLISHED = createField(DSL.name("published"), SQLDataType.TINYINT, this, "");

    private Tutorials(Name alias, Table<TutorialsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tutorials(Name alias, Table<TutorialsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>test_db.tutorials</code> table reference
     */
    public Tutorials(String alias) {
        this(DSL.name(alias), TUTORIALS);
    }

    /**
     * Create an aliased <code>test_db.tutorials</code> table reference
     */
    public Tutorials(Name alias) {
        this(alias, TUTORIALS);
    }

    /**
     * Create a <code>test_db.tutorials</code> table reference
     */
    public Tutorials() {
        this(DSL.name("tutorials"), null);
    }

    public <O extends Record> Tutorials(Table<O> child, ForeignKey<O, TutorialsRecord> key) {
        super(child, key, TUTORIALS);
    }

    @Override
    public Schema getSchema() {
        return TestDb.TEST_DB;
    }

    @Override
    public Identity<TutorialsRecord, Long> getIdentity() {
        return (Identity<TutorialsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TutorialsRecord> getPrimaryKey() {
        return Keys.KEY_TUTORIALS_PRIMARY;
    }

    @Override
    public List<UniqueKey<TutorialsRecord>> getKeys() {
        return Arrays.<UniqueKey<TutorialsRecord>>asList(Keys.KEY_TUTORIALS_PRIMARY);
    }

    @Override
    public Tutorials as(String alias) {
        return new Tutorials(DSL.name(alias), this);
    }

    @Override
    public Tutorials as(Name alias) {
        return new Tutorials(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tutorials rename(String name) {
        return new Tutorials(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tutorials rename(Name name) {
        return new Tutorials(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, Byte> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
